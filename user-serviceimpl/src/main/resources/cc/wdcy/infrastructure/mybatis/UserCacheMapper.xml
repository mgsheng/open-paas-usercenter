<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="cn.com.open.openpaas.userservice.app.infrastructure.mybatis.UserCacheRepositoryMyBatis">

    <resultMap type="UserCache" id="userCacheMap">
        <id property="id" column="id"/>
        <result property="appId" column="app_id"/>
        <result property="userId" column="user_id"/>
        <result property="pid" column="pid"/>
        <result property="guid" column="guid"/>
        <result property="archived" column="archived"/>
        <result property="createTime" column="create_time"/>

        <result property="email" column="email"/>
        <result property="phone" column="phone"/>
        <result property="cardNo" column="card_no"/>
        <result property="defaultUser" column="default_user"/>

        <result property="nickName" column="nickname"/>
        <result property="realName" column="real_name"/>
        <result property="headPicture" column="head_picture"/>
        <result property="identifyType" column="identify_type"/>
        <result property="identifyNo" column="identify_no"/>
        
        <result property="userType" column="user_type"/>
        <result property="userSercure" column="user_sercure"/>
        <result property="username" column="user_name"/>
        <result property="lastLoginTime" column="last_login_time"/>
        <result property="userState" column="user_state" />
        <result property="emailActivation" column="email_activation" />
        <result property="aesPassword" column="aes_password"/>
        <result property="desPassword" column="des_password"/>
		<result property="sha1Password" column="sha1_password"/>
		<result property="md5Password" column="md5_password"/>
		<result property="md5Salt" column="md5_salt"/>
        <result property="process" column="process"/>
        <result property="updatePwdTime" column="update_pwd_time"/>

    </resultMap>
    
    <sql id="Column_List">
    	id,
    	app_id,
    	user_id,
    	pid,
    	guid,
    	user_name,
    	nickname,
    	real_name,
    	head_picture,
    	identify_type,
    	identify_no,
    	phone,
    	email,
    	card_no,
    	user_type,
    	user_state,
    	user_sercure,
    	create_time,
    	archived,
    	default_user,
    	last_login_time,
    	email_activation,
    	aes_password,
    	des_password,
    	sha1_password,
    	md5_password,
    	md5_salt,
    	process,
    	update_pwd_time
    </sql>
   <sql id="SQL_Column_List">
    	id,
    	a.app_id as app_id,
    	a.user_id as user_id,
    	pid,
    	guid,
    	user_name,
    	nickname,
    	real_name,
    	head_picture,
    	identify_type,
    	identify_no,
    	phone,
    	email,
    	card_no,
    	user_type,
    	user_state,
    	user_sercure,
    	a.create_time as create_time,
    	archived,
    	default_user,
    	last_login_time,
    	email_activation,
    	aes_password,
    	des_password,
    	sha1_password,
    	md5_password,
    	md5_salt,
    	process,
    	update_pwd_time
    </sql>
	<select id="findByUsername" resultMap="userCacheMap">
         select 
         <include refid="Column_List" />
         from user_cache
         where user_name = #{username, jdbcType=VARCHAR}
         and archived = 0 limit 1
	</select>
	<select id="findByUserInfo" resultMap="userCacheMap">
         select 
         <include refid="SQL_Column_List" />
         from user_cache a,app_user b
         where a.id=b.user_id
         and a.user_name = #{username, jdbcType=VARCHAR}
         and b.app_id=#{appid}
         and a.archived = 0 limit 1
	</select>
	
	<select id="findByEmail" resultMap="userCacheMap">
         select 
         <include refid="Column_List" />
         from user_cache
         where email = #{email, jdbcType=VARCHAR}
         and archived = 0
	</select>
		<select id="findByEmailAndAppid" resultMap="userCacheMap">
         select 
         <include refid="Column_List" />
         from user_cache
         where email = #{email, jdbcType=VARCHAR}
          and app_id=#{appid}
         and archived = 0
	</select>
	
	<select id="findByPhone" resultMap="userCacheMap">
         select 
         <include refid="Column_List" />
         from user_cache
         where phone = #{phone, jdbcType=VARCHAR}
         and archived = 0 
	</select>
	<select id="findByPhoneAndAppid" resultMap="userCacheMap">
         select 
         <include refid="Column_List" />
         from user_cache
         where phone = #{phone, jdbcType=VARCHAR}
          and app_id=#{appid}
         and archived = 0 
	</select>
	
	<select id="findByCardNo" resultMap="userCacheMap">
		select
		<include refid="Column_List" />
		from user_cache
		where card_no=#{cardNo, jdbcType=VARCHAR}
	</select>
	<select id="findByCardNoAndAppid" resultMap="userCacheMap">
		select
		<include refid="Column_List" />
		from user_cache
		where card_no=#{cardNo, jdbcType=VARCHAR}
		 and app_id=#{appid}
		 and archived = 0 
	</select>
	
	<update id="updateUserCache" parameterType="UserCache">
        update user_cache set
        <if test="pid != null" >
        pid = #{pid},
        </if>
        <if test="guid != null and guid !=''" >
        guid = #{guid},
        </if>
        <if test="cardNo != null and cardNo !=''" >
        card_no = #{cardNo},
        </if>
        <if test="username != null and username !=''" >
        user_name = #{username},
        </if>
        <if test="nickName != null and nickName !=''" >
        nickname = #{nickName},
        </if>
        <if test="realName != null and realName !=''" >
        real_name = #{realName},
        </if>
        <if test="headPicture != null and headPicture !=''" >
        head_picture = #{headPicture},
        </if>
        <if test="identifyType != null and identifyType>-1">
        identify_type = #{identifyType},
        </if>
        phone = #{phone},
        email = #{email},
        <if test="userType != null and userType>-1" >
        user_type = #{userType},
        </if>
        <if test="userState != null and userState !=''" >
        user_state = #{userState},
        </if>
        <if test="userSercure != null" >
        user_sercure = #{userSercure},
        </if>
        <if test="lastLoginTime != null" >
        last_login_time = #{lastLoginTime},
        </if>
        <if test="identifyNo != null and identifyNo !=''" >
        identify_no = #{identifyNo},
        </if>
        <if test="aesPassword != null" >
        aes_password = #{aesPassword},
        </if>
        <if test="md5Password != null" >
        md5_password = #{md5Password},
        </if>
         <if test="md5Salt != null" >
        md5_salt = #{md5Salt},
        </if>
        <if test="process != null" >
            process = #{process},
        </if>
         <if test="updatePwdTime != null" >
        update_pwd_time = #{updatePwdTime},
        </if>
        archived = #{archived},
        default_user = #{defaultUser},
        email_activation = #{emailActivation}
        where id = #{id}
    </update>
        <update id="updateUserStatus">
        update user_cache set
        user_state = #{status}
        where guid = #{guid}
    </update>
    <select id="findAll" resultMap="userCacheMap">
		select
		<include refid="Column_List" />
		from user_cache
	</select>
	<select id="findUserById" parameterType="Integer" resultMap="userCacheMap">
         select <include refid="Column_List" /> from user_cache where id = #{id}
	</select>
	
	
	<insert id="saveUserCache" parameterType="UserCache" useGeneratedKeys="true" keyProperty="id">
	        insert into user_cache(id,guid,pid,archived,create_time,update_pwd_time,email,sha1_password,aes_password,user_name,phone, last_login_time,nickname,real_name,head_picture,identify_no,identify_type,user_type,user_sercure,default_user,app_id,card_no,md5_password,md5_salt,process)
	        values
	        (#{id},#{guid},#{pid},#{archived},#{createTime},#{updatePwdTime},#{email},#{sha1Password},#{aesPassword},#{username}, #{phone}, #{lastLoginTime}, #{nickName},#{realName},#{headPicture}, #{identifyNo}, #{identifyType}, #{userType}, #{userSercure},#{defaultUser},#{appId},#{cardNo},#{md5Password},#{md5Salt},#{process})
	</insert>
	 <update id="updateUserCardNoById">
        update user_cache set
        card_no = #{cardNo}
        where id = #{id}
    </update>
     <update id="updateParentUser">
        update user_cache set
        user_name = #{username},
        phone=#{phone},
        email=#{email}
        where id = #{id}
    </update>
     <delete id="deleteUser" parameterType="Integer">
        delete from user_cache where id=#{id}
    </delete>
    <select id="findUnprocessed" resultMap="userCacheMap">
        select
        <include refid="Column_List" />
        from user_cache where process = 0
    </select>

    <update id="updateUserCacheUnprocessed">
        <foreach collection="userCaches" item="item" index="index" separator=";">
            update user_cache set process = 1 where id = #{item.id}
        </foreach>
    </update>
     <select id="findByGuid" parameterType="String" resultMap="userCacheMap">
         select 
         <include refid="Column_List" />
         from user_cache where  guid = #{guid}  limit 1
	</select>
	 <update id="updatePhoneById">
        update user_cache set
        phone = #{phone}
        where id = #{id}
    </update>
     <update id="updateEmailById">
        update user_cache set
        email = #{email}
        where id = #{id}
    </update>
    	<select id="findByPid" parameterType="String" resultMap="userCacheMap">
         select
         <include refid="Column_List" />
         from user_cache
         where pid = #{pid}
	</select>
</mapper>